#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

int main() {
    int op; //defining operation number
    char Yee; //defining Yes and No options to continuing operations
    char restart; // back to beginning
    int stop = 0; //defining stop option frow exiting while loop                
    int reload = 0; //defining the reload option for looping
    
    while (reload == 0) /*allows the whole program to reload*/{
    
        while (stop == 0) /*allows the loop to stop as soon as stop == 1*/ {
            printf("Please enter the number for the task you would like to complete: \n "); //print prompt
            printf("1. Encrypt a message with a rotation cipher (provide message text and rotation amount \n "); //print option 1
            printf("2. Decrypt of a message encrypted with a rotation cipher (provide cipher text and rotation amount) \n "); //print option 2
            printf("3. Encrypt a message with a substitution cipher (provide message text and alphabet substitution) \n "); //print option 3
            printf("4. Decrypt a message encrypted with a substitution cipher (provide cipher text and substitutions) \n "); //print option 4
            printf("5. Decrypt a message encrypted with a rotation cipher (provide cipher text only) \n "); //print option 5
            printf("6. Decrypt a message encrypted with a substitution cipher (provide cipher text only) \n "); //print option 6
            printf("7. Exit program.\n "); //print option 7

            
            scanf("%d", &op); //scan for user input to operation choice
            getchar();
                while(op > 7 || op < 1 && stop == 0) /*code protection to prevent user from entering numbers that are not operation numbers*/ {
                    printf("There are only 7 operation. Enter a number between 1 - 7. >:c \n "); //prompt user to enter a valid number
                    scanf("%d", &op); //scan the operation number again to check for what the number is
                }
            
            printf("Do you want to continue with operation %d? OuO (Y/N) \n", op); //prompt for yes and no on continuing operation
            
            scanf(" %c", &Yee); //scan for inputted letter
            getchar();
            printf("We got a %c! OoO\n", Yee); //conformation of inputted letter
    
            if ((Yee == 'Y') || (Yee == 'y')){ //if the entered procedure is yes
                printf("Comencing operation: %d O.O\n", op); // print the operation number
                stop = 1; //leaves the loop
            }
            
            else {
                stop = 0; //brings back to the top of th whle loop
            }
        }
            
            if (op == 1) /*start Encryption of a message with a rotation cipher given the message text and rotation amount*/ {
                int LetterNumber = 0; //the letter number of the string value
                int i = 0; //the place on the string
                int key = 0; //shift key
                int uppermarker = 0; //marks upper case character
                char str[1000];
                
                printf("enter key for letter shift:\n");
                scanf("%d", &key);
                getchar();
                
                printf("enter Cypher Text:\n");
                fgets (str, sizeof(str), stdin);
                
                char c;
                int q = 0;    
                for ( q = 0; str[q] != '\0'; q++) {
                  str[q] = toupper(str[q]);
                } //code for making all letters uppercase
                
                for ( i = 0; str[i] != '\0'; i++) { //for loop for the encription
            //        printf("str = %s\n", str);
            //        printf("i = %d\n", i);
            //        printf("str[i] = %d\n", str[i]);
                
                    if (str[i] < 65) { //if statement for lower ASCII
                    }
                
                    else if (90 < str[i] && str[i] < 97){ //ASCII characters
                    }
                
                    else if (str[i] > 122) { //ASCII other characters
                    }
                    
                
                    else {
                        if (str[i] > 64 && str[i] < 91) {//marking upper case characters with marker
                            uppermarker = 1;
            //                printf("uppermarker = %d\n", uppermarker);
                        }
                        else {
                        }
                        LetterNumber = str[i];
                        LetterNumber = LetterNumber + key;
                        str[i] = LetterNumber;
            //            printf("maths complete\n");
                        
                        if (str[i] > 90 && uppermarker == 1) {
                            LetterNumber = LetterNumber - 26;
                            str[i] = LetterNumber;
            //                printf("%s\n", str);
                            uppermarker = 0;
            //                printf("Uppercase end maths complete\n");
                        }
                        else if (str[i] > 122 && uppermarker == 0){
                            LetterNumber = LetterNumber - 26;
                            str[i] = LetterNumber;
            //                printf("%s\n", str);
            //                printf("lowercase end maths complete\n");
                        }
                        else {
            //                printf("%s\n", str);
            //                printf("normal configuration\n");
                        }
                    }
                }
                
                printf("Cipher text: %s\n", str);
            }    
            else if (op == 2) /*start Decryption of a message encrypted with a rotation cipher given cipher text and rotation amount*/ {
                int LetterNumber = 0; //the letter number of the string value
                int i = 0; //the place on the string
                int key = 0; //shift key
                int uppermarker = 0; //marks upper case character
                char str[1000];
                
                printf("enter key for letter shift:\n");
                scanf("%d", &key);
                getchar();
                
                printf("enter Cypher Text:\n");
                fgets (str, sizeof(str), stdin);
                
                char c;
                int q = 0;    
                for ( q = 0; str[q] != '\0'; q++) {
                  str[q] = toupper(str[q]);
                } //code for making all letters uppercase
                
                for ( i = 0; str[i] != '\0'; i++) { //for loop for the encription
            //        printf("str = %s\n", str);
            //        printf("i = %d\n", i);
            //        printf("str[i] = %d\n", str[i]);

                    if (str[i] < 65) { //if statement for lower ASCII
                    }
                
                    else if (90 < str[i] && str[i] < 97){ //ASCII characters
                    }
                
                    else if (str[i] > 122) { //ASCII other characters
                    }
                    
                
                    else {
                        if (str[i] > 64 && str[i] < 91) {//marking upper case characters with marker
                            uppermarker = 1;
            //                printf("uppermarker = %d\n", uppermarker);
                        }
                        else {
                        }
                        LetterNumber = str[i];
                        LetterNumber = LetterNumber + key;
                        str[i] = LetterNumber;
            //            printf("maths complete\n");
                        
                        if (str[i] > 90 && uppermarker == 1) {
                            LetterNumber = LetterNumber - 26;
                            str[i] = LetterNumber;
            //                printf("%s\n", str);
                            uppermarker = 0;
            //                printf("Uppercase end maths complete\n");
                        }
                        else if (str[i] > 122 && uppermarker == 0){
                            LetterNumber = LetterNumber - 26;
                            str[i] = LetterNumber;
            //                printf("%s\n", str);
            //                printf("lowercase end maths complete\n");
                        }
                        else {
            //                printf("%s\n", str);
            //                printf("normal configuration\n");
                        }
                    }
                }
                
                printf("Cipher text: %s\n", str);
            
            }
            else if (op == 3) /*start Encryption of a message with a substitution cipher given message text and alphabet substitution*/ {
                char key[27];
                char message[1000];
                int letternumber = 0;
                int keynumber = 0;
                int i = 0;
            
                printf("Please enter the message you want to encrypt ^~^\n");
                fgets (message, sizeof(message), stdin);
            
                char c;
                int q = 0;    
                for ( q = 0; message[q] != '\0'; q++) {
                    message[q] = toupper(message[q]);
                } //code for making all letters uppercase
                
                printf("Now please enter the substitution key you would like to use ^~^\n");
                fgets (key, sizeof(key), stdin);
                
                printf("**after some magic waves of the wand**\n");
                
                printf("The Original Message: %s\n", message);
                
                for ( i = 0; message[i] != '\0'; i++) {
                    switch(message[i]){
                        case 'A' :
                            letternumber = message[i];
                            keynumber = key[0];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'B' :
                            letternumber = message[i];
                            keynumber = key[1];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                        
                        case 'C' :
                            letternumber = message[i];
                            keynumber = key[2];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                        
                        case 'D' :
                            letternumber = message[i];
                            keynumber = key[3];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                        
                        case 'E' :
                            letternumber = message[i];
                            keynumber = key[4];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                        
                        case 'F' :
                            letternumber = message[i];
                            keynumber = key[5];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                        
                        case 'G' :
                            letternumber = message[i];
                            keynumber = key[6];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                        
                        case 'H' :
                            letternumber = message[i];
                            keynumber = key[7];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'I' :
                            letternumber = message[i];
                            keynumber = key[8];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'J' :
                            letternumber = message[i];
                            keynumber = key[9];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'K' :
                            letternumber = message[i];
                            keynumber = key[10];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'L' :
                            letternumber = message[i];
                            keynumber = key[11];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'M' :
                            letternumber = message[i];
                            keynumber = key[12];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'N' :
                            letternumber = message[i];
                            keynumber = key[13];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'O' :
                            letternumber = message[i];
                            keynumber = key[14];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'P' :
                            letternumber = message[i];
                            keynumber = key[15];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'Q' :
                            letternumber = message[i];
                            keynumber = key[16];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'R' :
                            letternumber = message[i];
                            keynumber = key[17];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'S' :
                            letternumber = message[i];
                            keynumber = key[18];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'T' :
                            letternumber = message[i];
                            keynumber = key[19];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'U' :
                            letternumber = message[i];
                            keynumber = key[20];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'V' :
                            letternumber = message[i];
                            keynumber = key[21];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'W' :
                            letternumber = message[i];
                            keynumber = key[22];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'X' :
                            letternumber = message[i];
                            keynumber = key[23];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                            
            
                        case 'Y' :
                            letternumber = message[i];
                            keynumber = key[24];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
            
                        case 'Z' :
                            letternumber = message[i];
                            keynumber = key[25];
                            letternumber = keynumber;
                            message[i] = letternumber;
                            break;
                        
                        default :
                            letternumber = message[i];
                            message[i] = letternumber;
                    } //switch cases for each individual letter
            //      printf("%s\n", message);
                }
                printf("Now the Encripted message: %s\n", message);
            }
            else if (op == 4) /*start Decryption of a message encrypted with a substitution cipher given cipher text and substitutions*/ {
                char ABC[] =  "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
                char key[27];//QWERTYUIOPASDFGHJKLZXCVBNM
                char message[1000]; //Message: VIQZ ZIT ITEA OL ZIOL
                int letternumber = 0;
                int keynumber = 0;
                int i = 0;
            
                printf("Please enter the message you want to decrypt ^~^\n");
                fgets (message, sizeof(message), stdin);
            
                char c;
                int q = 0;    
                for ( q = 0; message[q] != '\0'; q++) {
                    message[q] = toupper(message[q]);
               } //code for making all letters uppercase
                
                printf("Now please enter the substitution key you would like to use ^~^\n");
                fgets (key, sizeof(key), stdin);
                
                printf("**after some magic waves of the wand**\n");
                
                printf("The Original Message: %s\n", message);
                
                for ( i = 0; message[i] != '\0'; i++) /*for loop to check character matches*/ {
                    
                            if (message[i] == key[0]) {
                                letternumber = message[i];
                                keynumber = ABC[0];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[1]) {
                                letternumber = message[i];
                                keynumber = ABC[1];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[2]) {
                                letternumber = message[i];
                                keynumber = ABC[2];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[3]) {
                                letternumber = message[i];
                                keynumber = ABC[3];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[4]) {
                                letternumber = message[i];
                                keynumber = ABC[4];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[5]) {
                                letternumber = message[i];
                                keynumber = ABC[5];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[6]) {
                                letternumber = message[i];
                                keynumber = ABC[6];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[7]) {
                                letternumber = message[i];
                                keynumber = ABC[7];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[8]) {
                                letternumber = message[i];
                                keynumber = ABC[8];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[9]) {
                                letternumber = message[i];
                                keynumber = ABC[9];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[10]) {
                                letternumber = message[i];
                                keynumber = ABC[10];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[11]) {
                                letternumber = message[i];
                                keynumber = ABC[11];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[12]) {
                                letternumber = message[i];
                                keynumber = ABC[12];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[13]) {
                                letternumber = message[i];
                                keynumber = ABC[13];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[14]) {
                                letternumber = message[i];
                                keynumber = ABC[14];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[15]) {
                                letternumber = message[i];
                                keynumber = ABC[15];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[16]) {
                                letternumber = message[i];
                                keynumber = ABC[16];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[17]) {
                                letternumber = message[i];
                                keynumber = ABC[17];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[18]) {
                                letternumber = message[i];
                                keynumber = ABC[18];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[19]) {
                                letternumber = message[i];
                                keynumber = ABC[19];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[20]) {
                                letternumber = message[i];
                                keynumber = ABC[20];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[21]) {
                                letternumber = message[i];
                                keynumber = ABC[21];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[22]) {
                                letternumber = message[i];
                                keynumber = ABC[22];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[23]) {
                                letternumber = message[i];
                                keynumber = ABC[23];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[24]) {
                                letternumber = message[i];
                                keynumber = ABC[24];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else if (message[i] == key[25]) {
                                letternumber = message[i];
                                keynumber = ABC[25];
                                letternumber = keynumber;
                                message[i] = letternumber;
                            }
                            else{
                                letternumber = message[i];
                                message[i] = letternumber; 
                            }
            
            
                }
                
                printf("Now the Decripted message is: %s\n", message);
            
            }
            else if (op == 5) /*start Decryption of a message encrypted with a rotation cipher given cipher text only*/ {
                char str[1000];
                char yesanswer;
                int i = 1;
                int key = 1;
                int thecheck = 0; /* it is THE check! For The! geddit... THE CHECK... ha ha ha... IT'S FUNNY THOOOOO*/
                int uppermarker = 0;
                int LetterNumber = 0;
                int counter = 0;
                char search1[] = "the";
            	char search2[] = "THE";
            	char search3[] = "The";
            
                printf("Okieeeee, enter the text that you want to decipher ^~^.\n");

                fgets (str, sizeof(str), stdin); //get input
            
            	char *ptr1 = strstr(str, search1); /*search for the*/
                char *ptr2 = strstr(str, search2); /*search for THE*/
                char *ptr3 = strstr(str, search3); /*search for The*/
            	
            	if (ptr1 != NULL) /* Substring for 'the' found */{
            	    	printf("Cypher text is: %s\n key is: %d\n", str, counter);
                		thecheck = 1;
            	}
            	else if (ptr2 != NULL) /* Substring for 'THE' found */ {
                	    printf("Cypher text is: %s\n key is: %d\n", str, counter);
                	    thecheck = 2;
            	}
            	else if (ptr3 != NULL) /* Substring for 'The' found */ {
                	    printf("Cypher text is: %s\n key is: %d\n", str, counter);
                	    thecheck = 3;
                }
            	else /* Substring not found thus continue search*/ {
            		    //printf("'%s' doesn't contain '%s', '%s', '%s' therefore search continue\n", str, search1, search2, search3);
            		    counter++;
           	    }
                while (thecheck == 0) /* checking for any occurance of varations of the word "the" */ {
                	for ( i = 0; str[i] != '\0'; i++) { //for loop for the encription
            //    scanf("%c", str);
            
            //        printf("str = %s\n", str);
            //        printf("i = %d\n", i);
            //        printf("str[i] = %d\n", str[i]);
                
                
                    if (str[i] < 65) { //if statement for lower ASCII
                    }
                
                    else if (90 < str[i] && str[i] < 97){ //ASCII characters
                    }
                
                    else if (str[i] > 122) { //ASCII other characters
                    }
                    
                
                    else {
                        if (str[i] > 64 && str[i] < 91) /*marking upper case characters with marker*/ {
                            uppermarker = 1;
            //                printf("uppermarker = %d\n", uppermarker);
                        }
                        else {
                        }
                        LetterNumber = str[i];
                        LetterNumber = LetterNumber + key;
                        str[i] = LetterNumber;
            //            printf("maths complete\n");
                        
                        if (str[i] > 90 && uppermarker == 1) {
                            LetterNumber = LetterNumber - 26;
                            str[i] = LetterNumber;
            //                printf("%s\n", str);
                            uppermarker = 0;
            //                printf("Uppercase end maths complete\n");
                        }
                        else if (str[i] > 122 && uppermarker == 0){
                            LetterNumber = LetterNumber - 26;
                            str[i] = LetterNumber;
            //                printf("%s\n", str);
            //                printf("lowercase end maths complete\n");
                        }
                        else {
            //                printf("%s\n", str);
            //                printf("normal configuration\n");
                        }
                    }
                }
                	char *ptr1 = strstr(str, search1); /*search for the*/
                    char *ptr2 = strstr(str, search2); /*search for THE*/
                    char *ptr3 = strstr(str, search3); /*search for The*/
            
            	if (ptr1 != NULL) /* Substring for 'the' found */{
            	    	printf("Cypher text is: %s\n key is: %d\n", str, counter);
                		thecheck = 1;
                }
            	else if (ptr2 != NULL) /* Substring for 'THE' found */ {
                	    printf("Cypher text is: %s\n key is: %d\n", str, counter);
                	    thecheck = 2;
            	}
            	else if (ptr3 != NULL) /* Substring for 'The' found */ {
                	    printf("Cypher text is: %s\n key is: %d\n", str, counter);
                	    thecheck = 3;
                }
            	else /* Substring not found thus continue search*/ {
            		    //printf("'%s' doesn't contain '%s', '%s', '%s' therefore search continue\n", str, search1, search2, search3);
            		    counter++;
            	}
                }

            }
            else if (op == 6) /*start Decryption of a message encrypted with a substitution cipher given cipher text only*/ {
                printf("Sorry my programmer wasn't good enough at programming to do this part of the task TT-TT. \n");
            }
            else if (op == 7) /*leaving exit*/ {
                printf("What! leaving already! But you havn't even tried aything! TT-TT fine... bye\n");
                return 0;
            }
        
        printf("Do you want to try another program? (Y/N) OuO\n");
        scanf(" %c", &restart);
        getchar();
        if ((restart =='Y') || (restart =='y')){ //if the entered procedure is yes
                printf("Alright! lets start all over again ^~^\n"); // confirmation for input
                reload = 0; //restarts the loop
                stop = 0;
        }
        else {
                reload = 1; //Ends the program
                printf("Awwwww! gone already! :c It was nice seeing you ;-; good bye for now TT^TT\n");
        }
    }
    
    return 0;
}
